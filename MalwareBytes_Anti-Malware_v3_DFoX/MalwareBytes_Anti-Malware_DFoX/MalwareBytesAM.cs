using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace MalwareBytes_Anti_Malware_DFoX
{
    public partial class MalwareBytesAM : Form
    {
        private Icon ico = Properties.Resources.mbam;
        private string hostPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), @"drivers\etc\hosts");
        private RegistryKey key = null;
        private Thread thread;

        public MalwareBytesAM()
        {
            InitializeComponent();
        }
        internal static string HashMD5(string phrase)
        {
            try
            {
                ASCIIEncoding encoder = new ASCIIEncoding();
                MD5CryptoServiceProvider md5Hasher = new MD5CryptoServiceProvider();
                byte[] hashedDataBytes = md5Hasher.ComputeHash(encoder.GetBytes(phrase));
                return BitConverter.ToString(hashedDataBytes).Replace("-", "");
            }
            catch
            {
                return null;
            }
        }

        internal static string DFX_dividia(double dimensione, string stringa, string Divisore = "-")
        {
            return String.Join(Divisore, Enumerable.Range(0, (int)Math.Ceiling(stringa.Length / dimensione))
               .Select(i => new string(stringa
                   .Skip(i * (int)dimensione)
                   .Take((int)dimensione)
                   .ToArray())));
        }
        private void DFoX_Genera_Attivazione()
        {
            string numeri = "123456789";
            string alfabeto = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Random r = new Random();
            string id = numeri[r.Next(0, 9)] + "" + alfabeto[r.Next(0, 26)] + "" + alfabeto[r.Next(0, 26)] + "" + numeri[r.Next(0, 9)] + "" + numeri[r.Next(0, 9)];
            string md5 = HashMD5(id).ToLower();
            string numerialfabeto = "0123456789ABCDEFGHJKLMNPQRTUVWXY";
            string code = String.Empty;
            for (int p = 0; p < 0x20; p += 2)
            {
                code += Convert.ToString(numerialfabeto[Convert.ToChar((long)((Convert.ToInt32(md5.Substring(p, 2), 0x10) & 0x8000001fL) + 1L)) - '\x0001']);
            }
            tID.Text = id;
            tCode.Text = DFX_dividia(4, code);
        }
        private void MalwareBytesAM_Load(object sender, EventArgs e)
        {
            this.Icon = ico;
            DFoX_Genera_Attivazione();
            tID.TabStop = false;
            tCode.TabStop = false;
        }

        private void Copia_Click(object sender, EventArgs e)
        {
            try
            {
                TextBox tb = null;
                Button bt = (Button)sender;
                tb = (bt.Name == "CopiaID") ? tID : tCode;
                if (bt.Text != "")
                    Clipboard.SetText((tb.SelectedText != "") ? tb.SelectedText : tb.Text.Trim());
            }
            catch
            {
                //Niente
            }
        }

        private void PIDonly_Click(object sender, EventArgs e)
        {
            DFoX_Genera_Attivazione();
        }

        public bool Registra()
        {
            key = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, ((Environment.Is64BitOperatingSystem) ? RegistryView.Registry64 : RegistryView.Registry32)).OpenSubKey(@"SOFTWARE\" + ((Is64BitOperatingSystem()) ? "WOW6432Node" : "") + @"\Microsoft\Windows\CurrentVersion\Uninstall\Malwarebytes Anti-Malware_is1\", true);
            try
            {
                key.SetValue("MinorVersion", 0x00000002);
                key.SetValue("MajorVersion", 0x00000002);
                key.SetValue("NoRepair", 0x00000001);
                key.SetValue("NoModify", 0x00000001);
                key.SetValue("Publisher", "Malwarebytes");
                key.SetValue("EstimatedSize", 0x00010be4);
                key.SetValue("InstallDate", "20161209");
                key.SetValue("DisplayVersion", "2.2.1.1043");
                key.SetValue("DisplayName", "Malwarebytes Anti-Malware versione 2.2.1.1043");
                key.SetValue("Inno Setup: Language", "it");
                key.SetValue("Inno Setup: Deselected Tasks", "");
                key.SetValue("Inno Setup: Selected Tasks", "desktopicon");
                key.SetValue("Inno Setup: User", "DeltaFoX");
                key.SetValue("Inno Setup: Icon Group", "Malwarebytes Anti-Malware");
                key.SetValue("InstallLocation", "C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\");
                key.SetValue("Inno Setup: App Path", "C:\\Program Files (x86)\\Malwarebytes Anti-Malware");
                key.SetValue("Inno Setup: Setup Version", "5.5.6 (a)");
                key.SetValue("QuietUninstallString", "\"C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\unins000.exe\" /SILENT");
                key.SetValue("UninstallString", "\"C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\unins000.exe\"");
                key.Close();
            }
            catch
            {
                key = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, ((Environment.Is64BitOperatingSystem) ? RegistryView.Registry64 : RegistryView.Registry32)).CreateSubKey(@"SOFTWARE\" + ((Is64BitOperatingSystem()) ? "WOW6432Node" : "") + @"\Microsoft\Windows\CurrentVersion\Uninstall\Malwarebytes Anti-Malware_is1\");
                try
                {
                    key.SetValue("MinorVersion", 0x00000002);
                    key.SetValue("MajorVersion", 0x00000002);
                    key.SetValue("NoRepair", 0x00000001);
                    key.SetValue("NoModify", 0x00000001);
                    key.SetValue("Publisher", "Malwarebytes");
                    key.SetValue("EstimatedSize", 0x00010be4);
                    key.SetValue("InstallDate", "20161209");
                    key.SetValue("DisplayVersion", "2.2.1.1043");
                    key.SetValue("DisplayName", "Malwarebytes Anti-Malware versione 2.2.1.1043");
                    key.SetValue("Inno Setup: Language", "it");
                    key.SetValue("Inno Setup: Deselected Tasks", "");
                    key.SetValue("Inno Setup: Selected Tasks", "desktopicon");
                    key.SetValue("Inno Setup: User", "DeltaFoX");
                    key.SetValue("Inno Setup: Icon Group", "Malwarebytes Anti-Malware");
                    key.SetValue("InstallLocation", "C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\");
                    key.SetValue("Inno Setup: App Path", "C:\\Program Files (x86)\\Malwarebytes Anti-Malware");
                    key.SetValue("Inno Setup: Setup Version", "5.5.6 (a)");
                    key.SetValue("QuietUninstallString", "\"C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\unins000.exe\" /SILENT");
                    key.SetValue("UninstallString", "\"C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\unins000.exe\"");
                }
                catch
                {
                    return false;
                }
                finally
                {
                    key.Close();
                }
            }
            return true;
        }
        private bool Preg()
        {
            string fileName = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData).ToString() + @"\Malwarebytes\Malwarebytes Anti-Malware\Configuration\license.conf";            
            try
            {
                if (File.Exists(fileName))
                    File.Delete(fileName);
                else
                    //new FileInfo(fileName).Directory.Create();
                    Directory.CreateDirectory(Path.GetDirectoryName(fileName));
                File.WriteAllBytes(fileName, Properties.Resources.license);
                puhost(false);
            }
            catch
            {
                return false;
            }
            return true;
        }

        private void Preactivate_Click(object sender, EventArgs e)
        {
            Preact.Enabled = false;
            Preact.Visible = false;
            progressBar1.Visible = true;
            thread = new Thread(Patcha);
            thread.Start();
        }

        private void Patcha()
        {
            bool riattiva = false;
            //Termino Servizio
            if (controllaServizio("MBAMService"))
            {
                riattiva = true;
                TerminaIniziaServizio("MBAMService", 20000, true);
            }
            bool reg = Registra();
            bool pid = Preg();
            if (pid && reg)
                MessageBox.Show("Pre-Activation Insert!.", "Info...", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            else if (!reg)
                MessageBox.Show("Error on Pre-Activation Register!.", "Error...", MessageBoxButtons.OK, MessageBoxIcon.Error);
            else
                MessageBox.Show("Error on Pre-Activation!.\nTry to manually stop the Service \"MBAMService\"", "Error...", MessageBoxButtons.OK, MessageBoxIcon.Error);
            if (riattiva)
            {
                riattiva = true;
                TerminaIniziaServizio("MBAMService", 20000, false);
            }
            Invoke(new Action(() =>
            {
                progressBar1.Visible = false;
                Preact.Enabled = true;
                Preact.Visible = true;
            }));
            return;
            /*try
            {
                string dir = String.Format(gpath, (!Is64BitOperatingSystem()) ? " (x86)" : "");
                if (Directory.Exists(dir) && File.Exists(dir + "mbam.exe"))
                {
                    //Termino Processo
                    string[] nser = { "mbam" };
                    terminaProcesso(nser);
                    Process.Start(dir + "mbam.exe");
                }
            }
            catch
            {
                return;
            }*/
        }
        private void Esci_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void _ApriUrl(string url)
        {
            try
            {
                string browserPath = ottieniLaPathBrowser();
                if (browserPath == string.Empty)
                    browserPath = "iexplore";
                Process process = new Process();
                process.StartInfo = new ProcessStartInfo(browserPath);
                process.StartInfo.Arguments = url;
                process.Start();
            }
            catch
            {
                //Nothing
            }
        }

        private void linkue_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            _ApriUrl(@"http://www.malwarebytes.com");
        }
        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            _ApriUrl(@"https://www.dfox.it");
        }

        private static string ottieniLaPathBrowser()
        {
            string name = string.Empty;
            RegistryKey regKey = null;

            try
            {
                var regDefault = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\.htm\\UserChoice", false);
                var stringDefault = regDefault.GetValue("ProgId");

                regKey = Registry.ClassesRoot.OpenSubKey(stringDefault + "\\shell\\open\\command", false);
                name = regKey.GetValue(null).ToString().ToLower().Replace("" + (char)34, "");

                if (!name.EndsWith("exe"))
                    name = name.Substring(0, name.LastIndexOf(".exe") + 4);

            }
            catch
            {
                return String.Empty;
            }
            finally
            {
                if (regKey != null)
                    regKey.Close();
            }
            return name;
        }

        public bool Is64BitOperatingSystem()
        {
            return Environment.Is64BitOperatingSystem;
        }
        private bool controllaServizio(string ns)
        {
            try
            {
                ServiceController sc = new ServiceController(ns);
                return (sc.Status == ServiceControllerStatus.Stopped) ? false : true;
            }
            catch
            {
                return false;
            }
        }
        public static void TerminaIniziaServizio(string serviceName, int timeoutMilliseconds, bool termina)
        {
            ServiceController service = new ServiceController(serviceName);
            try
            {
                TimeSpan timeout = TimeSpan.FromMilliseconds(timeoutMilliseconds);

                if (termina)
                    service.Stop();
                else
                    service.Start();
                service.WaitForStatus((termina) ? ServiceControllerStatus.Stopped : ServiceControllerStatus.Running, timeout);
            }
            catch
            {
                // ...
            }
        }

        private void terminaProcesso(string[] nomeProcesso)
        {
            for (int i = 0; i < nomeProcesso.Length; i++)
            {
                Process[] nomiProcessi = Process.GetProcessesByName(nomeProcesso[i]);
                foreach (Process p in nomiProcessi)
                {
                    try
                    {
                        p.Kill();
                    }
                    catch
                    {
                        try
                        {
                            p.Close();
                        }
                        catch
                        {

                        }
                    }
                }
            }
            return;
        }

        private void ControlloHost(string cosatrovare = "")
        {
            if (!File.Exists(hostPath))
            {
                StreamWriter scrivo = new StreamWriter(hostPath, false, Encoding.Default);
                scrivo.WriteLine("#	127.0.0.1       localhost");
                scrivo.Close();
            }
        }

        private void ScriviHost(string cosascrivere, string cosatrovare = "", bool rimuovere = false)
        {
            ControlloHost();
            bool trovato = false;
            string line;
            if (File.Exists(hostPath))
            {
                try
                {
                    FileAttributes attributo = File.GetAttributes(hostPath);
                    if ((attributo & FileAttributes.ReadOnly) == FileAttributes.ReadOnly)
                        File.SetAttributes(hostPath, attributo ^ FileAttributes.ReadOnly);
                    StreamReader file = new StreamReader(hostPath);
                    if (!rimuovere)
                    {
                        while ((line = file.ReadLine()) != null)
                            if (line.IndexOf(cosatrovare) != -1 && line.Trim().Substring(0, 1) != "#")
                                trovato = true;
                        file.Close();
                        if (!trovato)
                        {
                            using (StreamWriter stream = new StreamWriter(hostPath, true, Encoding.Default))
                            {
                                stream.WriteLine(cosascrivere);
                            }
                        }
                    }
                    else
                    {
                        List<string> hostlist = new List<string>();
                        while ((line = file.ReadLine()) != null)
                            if (line.IndexOf(cosatrovare) == -1) hostlist.Add(line);
                        file.Close();
                        StreamWriter scrivo = new StreamWriter(hostPath, false, Encoding.Default);
                        foreach (string lines in hostlist)
                        {
                            scrivo.WriteLine(lines);
                        }
                        scrivo.Close();
                    }
                }
                catch
                {
                    //Niente
                }
                finally
                {
                    File.SetAttributes(hostPath, File.GetAttributes(hostPath) | FileAttributes.ReadOnly);
                }
            }
            return;
        }

        private void puhost(bool pou)
        {
            ScriviHost("0.0.0.0                   keystone.mwbsys.com", "keystone.mwbsys.com", pou);
            ScriviHost("0.0.0.0                   telemetry.malwarebytes.com", "telemetry.malwarebytes.com", pou);
            ScriviHost("0.0.0.0                   telemetry.mwbsys.com", "telemetry.mwbsys.com", pou);
            ScriviHost("0.0.0.0                   serius.mwbsys.com", "serius.mwbsys.com", pou);
        }

        private void info_Click(object sender, EventArgs e)
        {
            Info popup = new Info();
            DialogResult dialogresult = popup.ShowDialog();
            popup.Dispose();
        }

        private void info_MouseHover(object sender, EventArgs e)
        {
            PictureBox dfx_img = sender as PictureBox;
            if (dfx_img != null)
                info.Location = new Point(167, 71);
        }

        private void info_MouseLeave(object sender, EventArgs e)
        {
            PictureBox dfx_img = sender as PictureBox;
            if (dfx_img != null)
                info.Location = new Point(167, 73);
        }

        private void info_Click_1(object sender, EventArgs e)
        {
            Info popup = new Info();
            DialogResult dialogresult = popup.ShowDialog();
            popup.Dispose();
        }
    }
}
