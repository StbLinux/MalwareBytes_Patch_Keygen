using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.ServiceProcess;
using System.Text;
using System.Threading;

namespace MalwareBytes_Anti_Malware_v3_Console
{
    class Program
    {
        private static string hostPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), @"drivers\etc\hosts");
        private static RegistryKey key = null;
        private static bool gencode = false;
        private static bool preactivate = false;
        private static bool nosilent = false;
        private static bool nohost = false;
        private static bool noservice = false;
        private static int timeout = 20000;
        private static Thread thread;
        static void Main(string[] args)
        {
            try
            {
                if (args.Length > 0)
                {
                    if ((Array.IndexOf(args, "/?")) != -1 || (Array.IndexOf(args, "?")) != -1)
                    {
                        Console.WriteLine("** MalwareBytes Anti_Malware v3.x Console **");
                        Console.WriteLine(" - By DeltaFoX v1.3 - 22/Dec/2018");
                        Console.WriteLine("");
                        Console.WriteLine("Info             :");
                        Console.WriteLine("");
                        Console.WriteLine("/? - ?           : This Menu");
                        Console.WriteLine("/gencode         : Generates Only the code");
                        Console.WriteLine("/nosilent        : Display A Console Info");
                        Console.WriteLine("/nohost          : Disable Patching Host");
                        Console.WriteLine("/noservice       : Disable Stop/Restart MBAMService Services");
                        Console.WriteLine("/preactivate     : Preactivate whit Default Value ");
                        Console.WriteLine("/timeout 20000   : Timeout Stop/Restart MBAMService Services Default 20s");
                        return;
                    }
                    gencode = (Array.IndexOf(args, "/gencode")) != -1 ? true : false;
                    if (gencode)
                    {
                        DFoX_Genera_Attivazione();
                        return;
                    }
                    preactivate = (Array.IndexOf(args, "/preactivate")) != -1 ? true : false;
                    if (preactivate)
                    {
                        nosilent = (Array.IndexOf(args, "/nosilent")) != -1 ? true : false;
                        nohost = (Array.IndexOf(args, "/nohost")) != -1 ? true : false;
                        noservice = (Array.IndexOf(args, "/noservice")) != -1 ? true : false;
                        bool ctimeout = (Array.IndexOf(args, "/timeout")) != -1 ? true : false;
                        if (ctimeout)
                        {
                            try
                            {
                                int p;
                                if (Int32.TryParse(args[(Array.IndexOf(args, "/timeout")) + 1], out p))
                                    timeout = p;
                                else
                                    timeout = 20000;
                            }
                            catch
                            {
                                timeout = 20000;
                            }
                        }
                        thread = new Thread(Preactivate);
                        thread.Start();
                    }
                    else
                    {
                        Console.WriteLine("Use /gencode or /preactivate...");
                    }
                }
                else
                {
                    Console.WriteLine("Use ? for Help Menu...");
                }                
            }
            catch
            {
                //
            }
            return;
        }
        internal static string HashMD5(string phrase)
        {
            try
            {
                ASCIIEncoding encoder = new ASCIIEncoding();
                MD5CryptoServiceProvider md5Hasher = new MD5CryptoServiceProvider();
                byte[] hashedDataBytes = md5Hasher.ComputeHash(encoder.GetBytes(phrase));
                return BitConverter.ToString(hashedDataBytes).Replace("-", "");
            }
            catch
            {
                return null;
            }
        }
        internal static string DFX_dividia(double dimensione, string stringa, string Divisore = "-")
        {
            return String.Join(Divisore, Enumerable.Range(0, (int)Math.Ceiling(stringa.Length / dimensione))
               .Select(i => new string(stringa
                   .Skip(i * (int)dimensione)
                   .Take((int)dimensione)
                   .ToArray())));
        }
        private static void DFoX_Genera_Attivazione()
        {
            string numeri = "123456789";
            string alfabeto = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Random r = new Random();
            string id = numeri[r.Next(0, 9)] + "" + alfabeto[r.Next(0, 26)] + "" + alfabeto[r.Next(0, 26)] + "" + numeri[r.Next(0, 9)] + "" + numeri[r.Next(0, 9)];
            string md5 = HashMD5(id).ToLower();
            string numerialfabeto = "0123456789ABCDEFGHJKLMNPQRTUVWXY";
            string code = String.Empty;
            for (int p = 0; p < 0x20; p += 2)
            {
                code += Convert.ToString(numerialfabeto[Convert.ToChar((long)((Convert.ToInt32(md5.Substring(p, 2), 0x10) & 0x8000001fL) + 1L)) - '\x0001']);
            }
            Console.WriteLine(id);
            Console.WriteLine(DFX_dividia(4, code));
        }
        private static bool Preg()
        {
            try
            {
                string fileName = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData).ToString() + @"\Malwarebytes\Malwarebytes Anti-Malware\Configuration\license.conf";
                if (File.Exists(fileName))
                    File.Delete(fileName);
                else
                    //new FileInfo(fileName).Directory.Create();
                    Directory.CreateDirectory(Path.GetDirectoryName(fileName));
                File.WriteAllBytes(fileName, Properties.Resources.license);
                if (!nohost)
                    puhost(false);
            }
            catch
            {
                return false;
            }
            return true;
        }
        private static void Preactivate()
        {
            if (nosilent)
            {
                using (var progress = new ProgressBar())
                {
                    for (int i = 0; i <= 100; i++)
                    {
                        progress.Report((double)i / 100);
                        Thread.Sleep(20);
                    }
                }
            }
            bool riattiva = false;
            if (!noservice)
            {
                //Termino Servizio
                if (controllaServizio("MBAMService"))
                {
                    riattiva = true;
                    TerminaIniziaServizio("MBAMService", timeout, true);
                }
            }
            bool reg = Registra();
            bool pid = Preg();
            if (nosilent)
            {
                if (pid && reg)
                    Console.WriteLine("Pre-Activation Insert!.");
                else if (!reg)
                    Console.WriteLine("Error on Pre-Activation Register!.");
                else
                    Console.WriteLine("Error on Pre-Activation!.\nTry to manually stop the Service \"MBAMService\"");
            }
            if (!noservice && riattiva)
            {
                riattiva = true;
                TerminaIniziaServizio("MBAMService", timeout, false);
            }

            return;
        }
        public static bool Is64BitOperatingSystem()
        {
            return Environment.Is64BitOperatingSystem;
        }
        private static bool controllaServizio(string ns)
        {
            try
            {
                ServiceController sc = new ServiceController(ns);
                return (sc.Status == ServiceControllerStatus.Stopped) ? false : true;
            }
            catch
            {
                return false;
            }
        }
        public static void TerminaIniziaServizio(string serviceName, int timeoutMilliseconds, bool termina)
        {
            ServiceController service = new ServiceController(serviceName);
            try
            {
                TimeSpan timeout = TimeSpan.FromMilliseconds(timeoutMilliseconds);

                if (termina)
                    service.Stop();
                else
                    service.Start();
                service.WaitForStatus((termina) ? ServiceControllerStatus.Stopped : ServiceControllerStatus.Running, timeout);
            }
            catch
            {
                // ...
            }
        }

        public static bool Registra()
        {
            key = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, ((Environment.Is64BitOperatingSystem) ? RegistryView.Registry64 : RegistryView.Registry32)).OpenSubKey(@"SOFTWARE\" + ((Is64BitOperatingSystem()) ? "WOW6432Node" : "") + @"\Microsoft\Windows\CurrentVersion\Uninstall\Malwarebytes Anti-Malware_is1\", true);
            try
            {
                key.SetValue("MinorVersion", 0x00000002);
                key.SetValue("MajorVersion", 0x00000002);
                key.SetValue("NoRepair", 0x00000001);
                key.SetValue("NoModify", 0x00000001);
                key.SetValue("Publisher", "Malwarebytes");
                key.SetValue("EstimatedSize", 0x00010be4);
                key.SetValue("InstallDate", "20161209");
                key.SetValue("DisplayVersion", "2.2.1.1043");
                key.SetValue("DisplayName", "Malwarebytes Anti-Malware versione 2.2.1.1043");
                key.SetValue("Inno Setup: Language", "it");
                key.SetValue("Inno Setup: Deselected Tasks", "");
                key.SetValue("Inno Setup: Selected Tasks", "desktopicon");
                key.SetValue("Inno Setup: User", "DeltaFoX");
                key.SetValue("Inno Setup: Icon Group", "Malwarebytes Anti-Malware");
                key.SetValue("InstallLocation", "C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\");
                key.SetValue("Inno Setup: App Path", "C:\\Program Files (x86)\\Malwarebytes Anti-Malware");
                key.SetValue("Inno Setup: Setup Version", "5.5.6 (a)");
                key.SetValue("QuietUninstallString", "\"C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\unins000.exe\" /SILENT");
                key.SetValue("UninstallString", "\"C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\unins000.exe\"");
                key.Close();
            }
            catch
            {
                key = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, ((Environment.Is64BitOperatingSystem) ? RegistryView.Registry64 : RegistryView.Registry32)).CreateSubKey(@"SOFTWARE\" + ((Is64BitOperatingSystem()) ? "WOW6432Node" : "") + @"\Microsoft\Windows\CurrentVersion\Uninstall\Malwarebytes Anti-Malware_is1\");
                try
                {
                    key.SetValue("MinorVersion", 0x00000002);
                    key.SetValue("MajorVersion", 0x00000002);
                    key.SetValue("NoRepair", 0x00000001);
                    key.SetValue("NoModify", 0x00000001);
                    key.SetValue("Publisher", "Malwarebytes");
                    key.SetValue("EstimatedSize", 0x00010be4);
                    key.SetValue("InstallDate", "20161209");
                    key.SetValue("DisplayVersion", "2.2.1.1043");
                    key.SetValue("DisplayName", "Malwarebytes Anti-Malware versione 2.2.1.1043");
                    key.SetValue("Inno Setup: Language", "it");
                    key.SetValue("Inno Setup: Deselected Tasks", "");
                    key.SetValue("Inno Setup: Selected Tasks", "desktopicon");
                    key.SetValue("Inno Setup: User", "DeltaFoX");
                    key.SetValue("Inno Setup: Icon Group", "Malwarebytes Anti-Malware");
                    key.SetValue("InstallLocation", "C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\");
                    key.SetValue("Inno Setup: App Path", "C:\\Program Files (x86)\\Malwarebytes Anti-Malware");
                    key.SetValue("Inno Setup: Setup Version", "5.5.6 (a)");
                    key.SetValue("QuietUninstallString", "\"C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\unins000.exe\" /SILENT");
                    key.SetValue("UninstallString", "\"C:\\Program Files (x86)\\Malwarebytes Anti-Malware\\unins000.exe\"");
                }
                catch
                {
                    return false;
                }
                finally
                {
                    key.Close();
                }
            }
            return true;
        }
        private static void puhost(bool pou)
        {
            ScriviHost("0.0.0.0                   keystone.mwbsys.com", "keystone.mwbsys.com", pou);
            ScriviHost("0.0.0.0                   telemetry.malwarebytes.com", "telemetry.malwarebytes.com", pou);
            ScriviHost("0.0.0.0                   telemetry.mwbsys.com", "telemetry.mwbsys.com", pou);
            ScriviHost("0.0.0.0                   serius.mwbsys.com", "serius.mwbsys.com", pou);
        }

        private static void ControlloHost(string cosatrovare = "")
        {
            if (!File.Exists(hostPath))
            {
                StreamWriter scrivo = new StreamWriter(hostPath, false, Encoding.Default);
                scrivo.WriteLine("#	127.0.0.1       localhost");
                scrivo.Close();
            }
        }

        private static void ScriviHost(string cosascrivere, string cosatrovare = "", bool rimuovere = false)
        {
            ControlloHost();
            bool trovato = false;
            string line;
            if (File.Exists(hostPath))
            {
                try
                {
                    FileAttributes attributo = File.GetAttributes(hostPath);
                    if ((attributo & FileAttributes.ReadOnly) == FileAttributes.ReadOnly)
                        File.SetAttributes(hostPath, attributo ^ FileAttributes.ReadOnly);
                    StreamReader file = new StreamReader(hostPath);
                    if (!rimuovere)
                    {
                        while ((line = file.ReadLine()) != null)
                            if (line.IndexOf(cosatrovare) != -1 && line.Trim().Substring(0, 1) != "#")
                                trovato = true;
                        file.Close();
                        if (!trovato)
                        {
                            using (StreamWriter stream = new StreamWriter(hostPath, true, Encoding.Default))
                            {
                                stream.WriteLine(cosascrivere);
                            }
                        }
                    }
                    else
                    {
                        List<string> hostlist = new List<string>();
                        while ((line = file.ReadLine()) != null)
                            if (line.IndexOf(cosatrovare) == -1) hostlist.Add(line);
                        file.Close();
                        StreamWriter scrivo = new StreamWriter(hostPath, false, Encoding.Default);
                        foreach (string lines in hostlist)
                        {
                            scrivo.WriteLine(lines);
                        }
                        scrivo.Close();
                    }
                }
                catch
                {
                    //Niente
                }
                finally
                {
                    File.SetAttributes(hostPath, File.GetAttributes(hostPath) | FileAttributes.ReadOnly);
                }
            }
            return;
        }
    }
}
